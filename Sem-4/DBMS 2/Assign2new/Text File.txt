/////////////FIRST APPROACH

//this query will find out all the triangles between papers. However, there maybe repititions like A,B,C and B,C,A.
//So we need to sort each tuple in alphabetical order after this query and remove repititions.

SELECT c1.cited_by as A, c2.cited_by as B, c2.cited as C
INTO c_triplets
FROM citations c1 join citations c2 on c2.cited_by = c1.cited
WHERE EXISTS (SELECT *
            FROM citations c3
            WHERE (((c3.cited_by = c1.cited_by) AND (c3.cited = c2.cited)) OR ((c3.cited_by = c2.cited) AND (c3.cited = c1.cited_by))));

//to sort each tuple in alphabetical order. first term will be least and last term will be greatest. So the middle term will be sum - least - greatest.
//select distinct after sorting each tuple so that we can remove repititions

SELECT DISTINCT LEAST(a,b,c) as a, a+b+c - LEAST(a,b,c) - GREATEST(a,b,c) as b, GREATEST(a,b,c) as c
INTO paper_citations_cliques
FROM c_triplets;

//Now take a tuple a,b,c of papers. We substitute a paper with its authors. So if a has x authors, b has y authors, c has z authors,
//we should be getting x*y*z triangles between authors. So we're kinda doing a cartesian product thingy, and its equivalent to a join in sql.

SELECT a1.author_id as X, a2.author_id as Y, a3.author_id as Z
INTO author_citation
FROM paper_citations_cliques p join auth_paper a1 on p.a = a1.paper_index
                                join auth_paper a2 on p.b = a2.paper_index
                                join auth_paper a3 on p.c = a3.paper_index;

//Note that author_citation table can have repititions like X,Y,Z and Y,X,Z. So just like before, we sort them in alphabetical order
//and also keeep a count of how many times the triplet is occuring (because its asked in the assgn lol)

SELECT LEAST(x,y,z) as sorted_x, x+y+z-LEAST(x,y,z) - GREATEST(x,y,z) as sorted_y, GREATEST(x,y,z) as sorted_z, COUNT(*) as count
INTO author_citation_cliques
FROM author_citation
GROUP BY (sorted_x, sorted_y, sorted_z);

/////////SECOND APPROACH
//first two queries are same, I just combined 3rd and 4th into one single query. Got the same ans in both cases, so ig everything is working fine :)
SELECT c1.cited_by as A, c2.cited_by as B, c2.cited as C
INTO c_triplets
FROM citations c1 join citations c2 on c2.cited_by = c1.cited
WHERE EXISTS (SELECT *
            FROM citations c3
            WHERE (((c3.cited_by = c1.cited_by) AND (c3.cited = c2.cited)) OR ((c3.cited_by = c2.cited) AND (c3.cited = c1.cited_by))));

SELECT DISTINCT LEAST(a,b,c) as a, a+b+c - LEAST(a,b,c) - GREATEST(a,b,c) as b, GREATEST(a,b,c) as c
INTO paper_citations_cliques
FROM c_triplets;

SELECT LEAST(a1.author_id, a2.author_id, a3.author_id) as X, a1.author_id + a2.author_id + a3.author_id - LEAST(a1.author_id, a2.author_id, a3.author_id) - GREATEST(a1.author_id, a2.author_id, a3.author_id) as Y, GREATEST(a1.author_id, a2.author_id, a3.author_id) as Z, COUNT(*) as count
INTO author_citation_cliques2
FROM paper_citations_cliques p join auth_paper a1 on p.a = a1.paper_index
                        join auth_paper a2 on p.b = a2.paper_index
                        join auth_paper a3 on p.c = a3.paper_index
GROUP BY (X, Y, Z);

///THIRD APPROACH
CREATE VIEW paper_citations_cliques AS
SELECT DISTINCT LEAST(c1.cited_by, c2.cited_by, c2.cited) as A, c1.cited_by + c2.cited_by + c2.cited - LEAST(c1.cited_by, c2.cited_by, c2.cited) - GREATEST(c1.cited_by, c2.cited_by, c2.cited) as B, GREATEST(c1.cited_by, c2.cited_by, c2.cited) as C
FROM citations c1 join citations c2 on c2.cited_by = c1.cited
WHERE EXISTS (SELECT *
            FROM citations c3
            WHERE (((c3.cited_by = c1.cited_by) AND (c3.cited = c2.cited)) OR ((c3.cited_by = c2.cited) AND (c3.cited = c1.cited_by))));

CREATE VIEW author_citation_cliques AS
SELECT LEAST(a1.author_id, a2.author_id, a3.author_id) as X, a1.author_id + a2.author_id + a3.author_id - LEAST(a1.author_id, a2.author_id, a3.author_id) - GREATEST(a1.author_id, a2.author_id, a3.author_id) as Y, GREATEST(a1.author_id, a2.author_id, a3.author_id) as Z, COUNT(*) as count
FROM paper_citations_cliques p join auth_paper a1 on p.a = a1.paper_index
                        join auth_paper a2 on p.b = a2.paper_index
                        join auth_paper a3 on p.c = a3.paper_index
GROUP BY (X, Y, Z);


//FINAL STEP
SELECT a.author_id as x_id, a.first_name || ' ' || a.middle_name || ' ' || a.last_name as x_name,
        b.author_id as y_id, b.first_name || ' ' || b.middle_name || ' ' || b.last_name as y_name,
        c.author_id as z_id, c.first_name || ' ' || c.middle_name || ' ' || c.last_name as z_name,
        cit.count as count
INTO query6
FROM author_citation_cliques cit join authors a on cit.x = a.author_id
                                join authors b on cit.y = b.author_id
                                join authors c on cit.z = c.author_id;
